#include "muhtas1.h"

char    a[80]={0};
char    *Device_val;
int     flag=0;
int     RSSI_VAL;
int     i;
double  powr;

int     main( void )
{
  WD_OSCAL_AND_INITS();
  
  while (1)
  {
    while (!(flag = ft_strnstr(a, "1819:D6:8BC2F9", 80)))
    {
      i = 0;
      TX("AT+INQ\r\n");
      __delay_cycles(2000000);
      TX("AT+INQC\r\n");
    }
    flag=0;
    ft_memset(a,0,80);
    Device_val = ft_get_rssi(a, flag);
    LCD_Yaz(Device);
  }
}

#pragma vector=USCIAB0RX_VECTOR
__interrupt void RX_ISR(void)
{
    a[i] = UCA0RXBUF;
    i++;
}

void    WD_OSCAL_AND_INITS(void)
{
    // Stop watchdog timer to prevent time out reset
  WDTCTL = WDTPW + WDTHOLD;
  LCD_Ayarla(); // Baslangiçta LCD ayarlarini yap.
  LCD_Git_XY(1,3); // Kursörü 1.satir 3.sütuna götür.
  if (CALBC1_1MHZ == 0xFF)
  {
    while (1);//wait till the processor is fully calibrated
  }
  DCOCTL = 0;
  BCSCTL1 = CALBC1_1MHZ;
  DCOCTL = CALDCO_1MHZ;
  
  Uart_Init();
  __bis_SR_register(GIE);

}

void    Uart_Init(void)
{  
  P1SEL = BIT1 + BIT2;//RX-TX
  P1SEL2 = BIT1 + BIT2;//RX-TX
  
  UCA0CTL1 |= UCSSEL_2;
  //38400
  UCA0BR0 = 26;
  UCA0BR1 = 0;
  UCA0MCTL = UCBRF_0 + UCBRS_0;
  UCA0CTL1 &=~ UCSWRST;
  IE2 |= UCA0RXIE;
}

void    putc(const unsigned c)
{
  while (!(IFG2&UCA0TXIFG));//Wait till tx is free
    UCA0TXBUF = c;
}

void    TX(const char *s)
{
  while (*s)
    putc(*s++);
}

char    *ft_get_rssi(char *a, int index)
{
  char *b = (char *)malloc(sizeof(char)*5);
  if(!b)
      return NULL;
    ft_strlcpy(b, a + flag + 22, 5);
    return (b);
}
